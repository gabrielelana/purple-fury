* Agenda
** Monday
   - From 09:30 to 11:30
     - Software development and agile methodologies
     - How Scrum works
     - Planning, user stories, business value and estimates
   - From 11:30 to 12:30
     - Project introduction
     - What’s the goal of the project?
     - Workshop: try to write user stories for the project
     - Setup Trello to keep track of the project
   - From 12:30 to 13:30
     - Deploy a “Walking Skeleton” in production
       - Fork the project
       - Create an account on https://zeit.co
       - Install NodeJS 8.11.2
       - Install now with ~$ npm install -g now~ and go through authentication process
       - From the project root run  ~$ now~ and be amazed that everything works
     - Look at the user stories
     - Look at the server APIs
     - How to pull features/fixes from upstream
       - ~git remote add upstream https://github.com/gabrielelana/purple-fury.git~
       - ~git fetch upstream~ update your local repository with the remote code
       - ~git checkout master~ make sure you are on your master
       - ~git merge upstream/master~ merge changes of remote repository with your local master
       - If you were on a feature branch (ex. ~US-001~) then probably you should rebase on master
         - ~git checkout US-001~ go back on your feature branch
         - ~git rebase master~ rebase on master
     - Setup Trello to keep track of the user stories
** Tuesday
   - 9:30 create the teams with Pietro, look at the user stories and explain what we are going to do
     - 4 iterations of 4 hours each: Tuesday morning, Wednesday morning, Thursday morning, Thursday evening
     - Standup at the beginning of every iteration, one will talk for the whole group
     - Deploy early, deploy often
     - Pull request and code review
     - Definition of done: must be approved by product owner
     - Definition of done: must be approved by the tech leader ???
     - Complete an user story before to start to work on another (minimize waste)
     - Point of the game: release as much value as possible
   - From 10:00 to 13:30
     - Work on the project
** Wednesday
   - From 09:30 to 13:30
     - Standup meeting
     - Work on the project
** Thursday
   - From 09:30 to 13:30
     - Standup meeting
     - Work on the project
   - From 14:30 to 18:30
     - Standup meeting
     - Work on the project
** Friday
   - From 9:30 to 10:30
     - Demo: show everybody what you did
   - From 10:30 to 12:30
     - Retrospective
   - From 12:30 to 13:30
     - Closing remarks and considerations: what to expect next
* Server Side
** User Stories [33/52]
  - [X] Deploy hello world application on now
  - [X] Basic chat application with socket.io
  - [X] Add ~nodemon~ to restart the server on change
  - [X] Add middleware to serve the favicon
  - [X] Add ~client~ directory
  - [X] Login an user anonymously
  - [X] Login an user with username/password and lock that username
  - [X] Rename ~id~ to ~token~
  - [X] Use login token to connect socket and bind user token to the socket
  - [X] Rename ~db~ in ~users~
  - [X] ~POST /messages~ send a message in a room || main room if not specified otherwise
    - [X] Create the default room at startup
    - [X] Check if a room already exists or not
    - [X] Check if a room is private and if you have access or not
  - [X] Authentication with a middleware
  - [X] ~POST /rooms~ to create a room
    - [X] Create public rooms
    - [X] Add room to list of private rooms to the user that creates the private room
  - [X] ~GET /rooms/{id}~ to read properties of a room
  - [X] Add ~.end()~ to every ~res.status(XXX)~
  - [X] Post messages to private rooms
  - [X] Can have multiple sockets associated to a single user
  - [X] ~POST /rooms/{id}/users~ to invite an user to a room
  - [X] Return full representation of an user after login?
  - [X] ~GET /rooms~ public rooms + private rooms accessible from the current user
  - [X] Remove the owner concept from a room
  - [X] Use ~room~ or ~user~ as parameter name when you need something like ~name|id~
  - [X] ~GET /users~ add ~connected: true/false~
  - [X] Socket channel ~users~
  - [X] ~GET /room/{name}/messages~ ordered
  - [X] ~PUT /users/:user/preferences~
  - [X] ~GET /users/:user/preferences~
  - [X] ~PUT /users/:user/profile~
  - [X] ~GET /messages~ all messages in all available rooms
  - [X] Parameters validation with ~express-validator~
  - [X] Show interaction with the application with org-mode and ob-http
  - [X] Example application to show how things works and how socket works
  - [X] Final deploy with an alias so that the examples can be run
  - [ ] Check for duplicates when create an anonymous username
  - [ ] ~DELETE /rooms/:room~ also remove all references in ~users~ if it's a private room
  - [ ] Notifications
    - [ ] Socket channel ~notifications~
    - [ ] ~GET /users/:user/notifications/unread~
    - [ ] ~DELETE /users/:user/notifications/unread/:notification~
    - [ ] ~GET /users/:user/notifications~
  - [ ] Notify users when they are invited to a room
  - [ ] ~PUT /messages/:id~ to modify a message
  - [ ] ~DELETE /message/:id~ to delete a message
  - [ ] Notify users when an message has been modified or deleted
  - [ ] ~GET /messages?search={term}~ ordered
  - [ ] Tests
  - [ ] ~GET /users/{token}/messages~
  - [ ] Add global eslint
  - [ ] Run server side tests on Travis on deploy
  - [ ] Add a basic ReacJS application in ~/client~ after build copy in ~/public~
  - [ ] Run client side tests on Travis on deploy
  - [ ] Create final repository ~codemaster-2018~ with an appropriate ~README.md~
  - [ ] Emacs flycheck JSON syntax
** APIs
*** Login anonymously

#+BEGIN_SRC http :pretty :wrap EXAMPLE
POST http://localhost:4000/login
Accept: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "username": "user-0798",
  "password": "$2b$05$zOO/jVkp7w5jad9twShZT.7Ywtc5WDxqrT2fNMzJh3grsTRDR.Zdq",
  "rooms": [],
  "preferences": {},
  "profile": {},
  "_id": "EitaKSrz2jxnZmeu",
  "createdAt": "2018-06-13T08:19:09.809Z",
  "updatedAt": "2018-06-13T08:19:09.809Z",
  "token": "EitaKSrz2jxnZmeu"
}
#+END_EXAMPLE

*** Login with username and password

#+BEGIN_SRC http :pretty :wrap EXAMPLE
POST http://localhost:4000/login
Accept: application/json
Content-Type: application/json

{"username": "user-001", "password": "secret"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "username": "user-001",
  "password": "$2b$05$yD.XnmI5iktMfvgTRFluF.tv7xC4ttbmH/KyRmhK..9x4kt9aO7FG",
  "rooms": [],
  "preferences": {},
  "profile": {},
  "_id": "96Nv4F31AWdTnYKx",
  "createdAt": "2018-06-11T20:57:57.620Z",
  "updatedAt": "2018-06-11T20:57:57.620Z",
  "token": "96Nv4F31AWdTnYKx"
}
#+END_EXAMPLE

If we login again with the same username and password we are going to obtain the same token
#+BEGIN_SRC http :pretty :wrap EXAMPLE
POST http://localhost:4000/login
Accept: application/json
Content-Type: application/json

{"username": "user-001", "password": "secret"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "username": "user-001",
  "password": "$2b$05$yD.XnmI5iktMfvgTRFluF.tv7xC4ttbmH/KyRmhK..9x4kt9aO7FG",
  "rooms": [],
  "preferences": {},
  "profile": {},
  "_id": "96Nv4F31AWdTnYKx",
  "createdAt": "2018-06-11T20:57:57.620Z",
  "updatedAt": "2018-06-11T20:57:57.620Z",
  "token": "96Nv4F31AWdTnYKx"
}
#+END_EXAMPLE

If we try to steal an account we obtain an error
#+BEGIN_SRC http :pretty :wrap EXAMPLE
POST http://localhost:4000/login
Accept: application/json
Content-Type: application/json

{"username": "user-001", "password": "another"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "error": "Wrong password, if you tried to create an account then the username is already taken"
}
#+END_EXAMPLE

*** Post a message

First thing we need to login
#+NAME: login
#+BEGIN_SRC http :pretty :select .token :results value silent
POST http://localhost:4000/login
Accept: application/json
Content-Type: application/json

{"username": "user-002", "password": "secret"}
#+END_SRC

Then using the token we can post a message to the default room
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
POST http://localhost:4000/messages
Accept: application/json
Content-Type: application/json

{"token": "${token}", "message": "Blessed be the fruit"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "username": "user-002",
  "message": "Blessed be the fruit",
  "room": "main",
  "_id": "bShGKnNki10AkUj0",
  "createdAt": "2018-06-13T08:28:01.100Z",
  "updatedAt": "2018-06-13T08:28:01.100Z"
}
#+END_EXAMPLE

Without authentication we get an error
#+BEGIN_SRC http :pretty :wrap EXAMPLE
POST http://localhost:4000/messages
Accept: application/json
Content-Type: application/json

{"message": "Praised be"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "error": "Missing authentication token"
}
#+END_EXAMPLE

*** Create and post messages to a public room

Using the authentication token we can post a message to the default room
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
POST http://localhost:4000/rooms
Accept: application/json
Content-Type: application/json

{"token": "${token}", "name": "ReactJS", "topic": "Everything about ReactJS"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "name": "ReactJS",
  "topic": "Everything about ReactJS",
  "isPrivate": false,
  "_id": "zaRSbHnzLlEvW1Aw",
  "createdAt": "2018-06-13T08:22:09.974Z",
  "updatedAt": "2018-06-13T08:22:09.974Z"
}
#+END_EXAMPLE

Then we can post messages to it
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
POST http://localhost:4000/messages
Accept: application/json
Content-Type: application/json

{"token": "${token}", "room": "ReactJS", "message": "ReactJS is cool"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "username": "user-002",
  "message": "ReactJS is cool",
  "room": "ReactJS",
  "_id": "COkAhm8gw9lBFj20",
  "createdAt": "2018-06-13T08:22:12.813Z",
  "updatedAt": "2018-06-13T08:22:12.813Z"
}
#+END_EXAMPLE

We cannot post messages to a room that doesn't exists
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
POST http://localhost:4000/messages
Accept: application/json
Content-Type: application/json

{"token": "${token}", "room": "XXX", "message": "ReactJS is cool"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "error": "Room not found"
}
#+END_EXAMPLE

*** Create and invite others to a private room

We are going to create two users
#+NAME: login-003
#+BEGIN_SRC http :pretty :select .token :results value silent
POST http://localhost:4000/login
Accept: application/json
Content-Type: application/json

{"username": "user-003", "password": "secret"}
#+END_SRC

#+NAME: login-004
#+BEGIN_SRC http :pretty :select .token :results value silent
POST http://localhost:4000/login
Accept: application/json
Content-Type: application/json

{"username": "user-004", "password": "secret"}
#+END_SRC

user-003 will create a private room ~Gossip~
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login-003
POST http://localhost:4000/rooms
Accept: application/json
Content-Type: application/json

{"token": "${token}", "name": "Gossip", "topic": "Gossip", "isPrivate": true}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "name": "Gossip",
  "topic": "Gossip",
  "isPrivate": true,
  "_id": "nRIWewnIFdGkVrZM",
  "createdAt": "2018-06-11T21:48:26.471Z",
  "updatedAt": "2018-06-11T21:48:26.471Z"
}
#+END_EXAMPLE

user-003 can post messages to it
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login-003
POST http://localhost:4000/messages
Accept: application/json
Content-Type: application/json

{"token": "${token}", "room": "Gossip", "message": "blah, blah, blah"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "username": "user-003",
  "message": "blah, blah, blah",
  "room": "Gossip",
  "_id": "VgdSvQjH9SSU3boz",
  "createdAt": "2018-06-11T21:48:29.682Z",
  "updatedAt": "2018-06-11T21:48:29.682Z"
}
#+END_EXAMPLE

But user-004 cannot, must be invited first
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login-004
POST http://localhost:4000/messages
Accept: application/json
Content-Type: application/json

{"token": "${token}", "room": "Gossip", "message": "Chil"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "error": "Room is private"
}
#+END_EXAMPLE

Then let's invite him
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login-003
POST http://localhost:4000/rooms/Gossip/users
Accept: application/json
Content-Type: application/json

{"token": "${token}", "username": "user-004"}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "name": "Gossip",
  "topic": "Gossip",
  "isPrivate": true,
  "_id": "nRIWewnIFdGkVrZM",
  "createdAt": "2018-06-11T21:48:26.471Z",
  "updatedAt": "2018-06-11T21:48:26.471Z"
}
#+END_EXAMPLE

*** Get all messages posted to all accessible rooms

Using the authentication token we get all the messages posted to all accessible rooms
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
GET http://localhost:4000/messages?token=${token}
Accept: application/json
Content-Type: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "messages": [
    {
      "username": "user-002",
      "message": "ReactJS is cool",
      "room": "ReactJS",
      "_id": "COkAhm8gw9lBFj20",
      "createdAt": "2018-06-13T08:22:12.813Z",
      "updatedAt": "2018-06-13T08:22:12.813Z"
    },
    {
      "username": "user-002",
      "message": "Blessed be the fruit",
      "room": "main",
      "_id": "bShGKnNki10AkUj0",
      "createdAt": "2018-06-13T08:28:01.100Z",
      "updatedAt": "2018-06-13T08:28:01.100Z"
    }
  ]
}
#+END_EXAMPLE

*** Get all messages posted to a specific room

Using the authentication token we get all the messages posted to a specific room
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
GET http://localhost:4000/rooms/ReactJS/messages?token=${token}
Accept: application/json
Content-Type: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "messages": [
    {
      "username": "user-002",
      "message": "ReactJS is cool",
      "room": "ReactJS",
      "_id": "COkAhm8gw9lBFj20",
      "createdAt": "2018-06-13T08:22:12.813Z",
      "updatedAt": "2018-06-13T08:22:12.813Z"
    }
  ]
}
#+END_EXAMPLE

*** User profile

User profile is something to be considered public, something like: an introduction message, the email, the avatar, ecc...

#+NAME: login-005
#+BEGIN_SRC http :pretty :select .token :results value silent
POST http://localhost:4000/login
Accept: application/json
Content-Type: application/json

{"username": "user-005", "password": "secret"}
#+END_SRC

As you can see the profile is part of the user's representation
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login-005
GET http://localhost:4000/users?token=${token}
Accept: application/json
Content-Type: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "users": [
    {
      "username": "user-004",
      "profile": {},
      "isConnected": false
    },
    {
      "username": "user-0798",
      "profile": {},
      "isConnected": false
    },
    {
      "username": "user-002",
      "profile": {},
      "isConnected": false
    },
    {
      "username": "user-005",
      "profile": {},
      "isConnected": false
    }
  ]
}
#+END_EXAMPLE

An user can change his profile
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login-005
PUT http://localhost:4000/users/user-005/profile
Accept: application/json
Content-Type: application/json

{"token": "${token}", "profile": {"introduction": "I'm a nice guy, nice to meet you all ;-)"}}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "introduction": "I'm a nice guy, nice to meet you all ;-)"
}
#+END_EXAMPLE

Everyone can see my profile
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login-005
GET http://localhost:4000/users?token=${token}
Accept: application/json
Content-Type: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "users": [
    {
      "username": "user-004",
      "profile": {},
      "isConnected": false
    },
    {
      "username": "user-0798",
      "profile": {},
      "isConnected": false
    },
    {
      "username": "user-002",
      "profile": {},
      "isConnected": false
    },
    {
      "username": "user-005",
      "profile": {
        "introduction": "I'm a nice guy, nice to meet you all ;-)"
      },
      "isConnected": false
    }
  ]
}
#+END_EXAMPLE

*** User preferences

User preferences are something to be considered private, it's a kind of storage used to remember things about the user (ex. preferred topic, last message read per room, ...)
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
GET http://localhost:4000/users/user-002/preferences?token=${token}
Accept: application/json
Content-Type: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{}
#+END_EXAMPLE

We can update them
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
PUT http://localhost:4000/users/user-002/preferences
Accept: application/json
Content-Type: application/json

{"token": "${token}", "preferences": {"topics": ["JS", "ReactJS", "HTML5", "CSS3"]}}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "topics": [
    "JS",
    "ReactJS",
    "HTML5",
    "CSS3"
  ]
}
#+END_EXAMPLE

And get it back
#+BEGIN_SRC http :pretty :wrap EXAMPLE :var token=login
GET http://localhost:4000/users/user-002/preferences?token=${token}
Accept: application/json
Content-Type: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
{
  "topics": [
    "JS",
    "ReactJS",
    "HTML5",
    "CSS3"
  ]
}
#+END_EXAMPLE


* Client Side
** User Stories
  - An user can enter anonymously
  - An user can post messages
  - An user can see posted messages
  - An user can see who posted every message
  - An user can enter with an username
  - An user can see what’s his username
  - An user can see who is connected to the same server
  - An user can create another chat room with a name
  - An user can see the list of available rooms
  - An user can create a private chat room to chat with another user
  - An user can create a private chat room and invite other users to chat
  - An user can tell if a room has unread messages
  - An user can mention another user by prefixing his username with `@`
  - An user can mention a topic by prefixing it with `#`
  - An user will be notified if mentioned in a message
  - An user will be notified if a topic of his interest is mentioned in a message
  - An user will be notified if its username is used in a message
  - An user will be notified when one of his friends comes online
  - An user can mention another user selecting it from a list of users
  - An user can mention a topic selecting it from a list of topics
  - An user can mention everybody in a room by including in the message `@room` or `@everybody`
  - An user can mention another room by prefixing the name of the room with `$`
  - An user can use a private room available only to himself to experiment with all the platform features
  - An user can render one or more word in bold surrounding it with `*`
  - An user can render one or more word in italic surrounding it with `_`
  - An user can render one or more word in strike surrounding it with `~`
  - An user can render one or more word as code surrounding it with backticks
  - An user can post multiline messages
  - An user can render one or more lines as code surrounding it with triple backticks
  - An user can quote messages by prefixing it `>`
  - An user can configure its avatar
  - An user can search for past messages
  - An user can edit a sent message
  - An user can be seen from other users as “not available to chat”
  - An user can use keyboard shortcuts to access common functionalities
  - A message not yet sent by an user can survive a temporary network connection interruption
  - A premium user can use messages like “@chiara!tay” (tay = Thinking About You) that will show beautiful effects on the recipient screen
